-- 1. Recordsâ€™ Count
SELECT COUNT(*) 
FROM WizzardDeposits

-- 2. Longest Magic Wand
SELECT MagicWandSize AS [LongestMagicWand]
FROM WizzardDeposits 
GROUP BY MagicWandSize
HAVING MAX(MagicWandSize) > 30

-- 3. Longest Magic Wand Per Deposit Groups
SELECT DepositGroup, MAX(MagicWandSize) AS [LongestMagicWand]
FROM WizzardDeposits
GROUP BY DepositGroup
HAVING MAX(MagicWandSize) > 30

-- 4. * Smallest Deposit Group Per Magic Wand Size
SELECT TOP (2) DepositGroup
FROM WizzardDeposits
GROUP BY DepositGroup
HAVING AVG(MagicWandSize) = 20

-- 5. Deposit Sum
SELECT DepositGroup, SUM(DepositAmount) AS [TotalSum]
FROM WizzardDeposits
GROUP BY DepositGroup

-- 6. Deposits Sum for Ollivander Family
SELECT DepositGroup, SUM(DepositAmount) AS [TotalSum]
FROM WizzardDeposits
WHERE MagicWandCreator = 'Ollivander family'
GROUP BY DepositGroup;

-- 7. Deposits Filter
SELECT DepositGroup, SUM(DepositAmount) AS [TotalSum]
FROM WizzardDeposits
WHERE MagicWandCreator = 'Olivander family'
GROUP BY DepositGroup
HAVING SUM(DepositAmount) < 150000
ORDER BY [TotalSum] DESC;

-- 8.  Deposit Charge
SELECT DepositGroup, MagicWandCreator, MIN(DepositCharge) AS [MinDepositCharge]
FROM WizzardDeposits
GROUP BY DepositGroup, MagicWandCreator
ORDER BY MagicWandCreator, DepositGroup ASC

-- 9. Age Groups
SELECT 
    CASE
        WHEN age <= 10 THEN '[0-10]'
        WHEN age <= 20 THEN '[11-20]'
        WHEN age <= 30 THEN '[21-30]'
        WHEN age <= 40 THEN '[31-40]'
        WHEN age <= 50 THEN '[41-50]'
        WHEN age <= 60 THEN '[51-60]'
        ELSE '[61+]'
    END AS AgeGroup,
    COUNT(*) AS WizardCount
FROM WizzardDeposits
GROUP BY 
    CASE
        WHEN age <= 10 THEN '[0-10]'
        WHEN age <= 20 THEN '[11-20]'
        WHEN age <= 30 THEN '[21-30]'
        WHEN age <= 40 THEN '[31-40]'
        WHEN age <= 50 THEN '[41-50]'
        WHEN age <= 60 THEN '[51-60]'
        ELSE '[61+]'
    END
ORDER BY WizardCount;

-- 10. First Letter
SELECT LEFT(FirstName, 1) AS [FirstLetter]
FROM WizzardDeposits
WHERE DepositGroup = 'Troll Chest'
GROUP BY LEFT(FirstName, 1)
ORDER BY [FirstLetter]

-- 11. Average Interest 
SELECT DepositGroup, IsDepositExpired, AVG(DepositInterest) AS [AverageInterest]
FROM WizzardDeposits
WHERE DepositStartDate > '01/01/1985'
GROUP BY DepositGroup, IsDepositExpired
ORDER BY DepositGroup DESC, IsDepositExpired

-- 12. * Rich Wizard, Poor Wizard
SELECT SUM(ResultTable.[Difference]) AS SumDifference
FROM (SELECT DepositAmount - (SELECT DepositAmount FROM WizzardDeposits WHERE Id = WizDeposits.Id + 1) 
AS [Difference] FROM WizzardDeposits WizDeposits) AS ResultTable

-- 13. Departments Total Salaries
SELECT DepartmentID, SUM(Salary) AS [TotalSalary] 
FROM Employees
GROUP BY DepartmentID
ORDER BY DepartmentID

-- 14. Employees Minimum Salaries
SELECT DepartmentID, MIN(Salary) AS [MinimumSalary] 
FROM Employees
WHERE HireDate > '01/01/2000'
AND DepartmentID IN (2, 5, 7)
GROUP BY DepartmentID

-- 15. Employees Average Salaries
SELECT DepartmentID, MAX(Salary) AS [MinimumSalary] 
FROM Employees
SET Salary == Salary + 5000 
WHERE Salary > 30000 AND DepartmentID != 42
GROUP BY DepartmentID

-- 16. Employees Maximum Salaries
SELECT DepartmentID, MAX(Salary) AS [MaxSalary]
FROM Employees
GROUP BY DepartmentID
HAVING MAX(Salary) >= 30000 AND MAX(Salary) <= 70000

-- 17. Employees Count Salaries
SELECT COUNT(Salary) AS [Count]
FROM Employees
WHERE ISNULL(ManagerID, 0) = 0

SELECT * FROM Employees

-- 18. *3rd Highest Salary
SELECT DepartmentID, 
	(SELECT DISTINCT Salary FROM Employees WHERE DepartmentID = e.DepartmentID ORDER BY Salary DESC OFFSET 2 ROWS FETCH NEXT 1 ROWS ONLY) AS ThirdHighestSalary
 FROM Employees e
WHERE (SELECT DISTINCT Salary FROM Employees WHERE DepartmentID = e.DepartmentID ORDER BY Salary DESC OFFSET 2 ROWS FETCH NEXT 1 ROWS ONLY) IS NOT NULL
GROUP BY DepartmentID

-- 19. **Salary Challenge
SELECT TOP(10) e.FirstName, e.LastName, e.DepartmentID
FROM Employees AS e
WHERE e.Salary > (SELECT AVG(e2.Salary)
From Employees AS e2
WHERE e.DepartmentID = e2.DepartmentID)
ORDER BY e.DepartmentID